BITO
write code to CMakeLisis.txt to compile  page487.c
------------------
use_CMakeLists.txt
--------------------------
aikidance@aikidance:~/C_Deytel$ cmake --version
cmake version 3.28.3
---------------
mkdir build
cd build
----------
cmake ..
make
-------------
./page487
-------------
----------------
poage537.c

# Specify the minimum version of CMake required
cmake_minimum_required(VERSION 3.28.3)

# Set the project name
project(page537Project C)

# Add the executable target
add_executable(page537 page537.c)

aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ cmake ./
-- The C compiler identification is GNU 13.3.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Configuring done (3.3s)
-- Generating done (0.0s)
-- Build files have been written to: /home/aikidance/C_Deytel/Part12_data_strutures/page537
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ make
[ 50%] Building C object CMakeFiles/page537.dir/page537.c.o
[100%] Linking C executable page537
[100%] Built target page537
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ ./page537
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ 
----------------------------------------------------------
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ make help
The following are some of the valid targets for this Makefile:
... all (the default if no target is provided)
... clean
... depend
... edit_cache
... rebuild_cache
... page537
... page537.o
... page537.i
... page537.s
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ 
-----------------------------
# Specify the minimum version of CMake required
cmake_minimum_required(VERSION 3.28.3)

# Set the project name
project(page537Project C)

# Set the build type to Debug
set(CMAKE_BUILD_TYPE Debug)

# Add the executable target
add_executable(page537 page537.c)


aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ cmake --build . --config Debug -- VERBOSE=1

gdb ./page537
break main
run
--------------------------------
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ gdb ./page537
GNU gdb (Ubuntu 15.0.50.20240403-0ubuntu1) 15.0.50.20240403-git
Copyright (C) 2024 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./page537...
(gdb)  break main
Breakpoint 1 at 0x1195: file /home/aikidance/C_Deytel/Part12_data_strutures/page537/page537.c, line 13.
(gdb) run
Starting program: /home/aikidance/C_Deytel/Part12_data_strutures/page537/page537 

This GDB supports auto-downloading debuginfo from the following URLs:
  <https://debuginfod.ubuntu.com>
Enable debuginfod for this session? (y or [n]) y
Debuginfod has been enabled.
To make this setting permanent, add 'set debuginfod enabled on' to .gdbinit.
Downloading separate debug info for system-supplied DSO at 0x7ffff7fc3000
[Thread debugging using libthread_db enabled]                                                                                                                                                  
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main () at /home/aikidance/C_Deytel/Part12_data_strutures/page537/page537.c:13
13          void *pChain = calloc(NODECNT,sizeof(struct node));
(gdb) 
-----------------------------
Все мы проходили через этот неловкий момент когда во время отладки мы проскочили интересующую нас функцию, 
и теперь снова надо перезапускать отладчик, 
проходить тот же путь на CFG и т.п. Чтобы избежать этого, в gdb есть такая фишка как Reverse Debug, 
позволяющая сохранить состояние программы и обратно отладить до него.

Для этого, после запуска отладчика укажем gdb, что хотим начать использовать 
reverse debug и стоит сохранять состояния программы

record

После этого станут доступны следующие команды

reverse-step
reverse-next
------------------------------------------
gdb ./page537
break main
run
record
reverse-continue, reverse-finish, reverse-next, reverse-nexti, reverse-search, reverse-step
-----------------------------
https://github.com/hugsy/gef

GEF (pronounced ʤɛf - "Jeff") is a set of commands for x86/64, ARM, MIPS, PowerPC and SPARC 
to assist exploit developers and reverse-engineers when using old school GDB. It provides additional features 
to GDB using the Python API to assist during the process of dynamic analysis and exploit development. 
Application developers will also benefit from it, as GEF lifts a great part of regular GDB obscurity, 
avoiding repeating traditional commands, or bringing out the relevant information from the debugging runtime.

bash -c "$(wget https://gef.blah.cat/sh -O -)"

GEF for linux ready, type `gef' to start, `gef config' to configure
93 commands loaded and 5 functions added for GDB 15.0.50.20240403-git in 0.00ms using Python engine 3.12
------------------------------
git clone https://github.com/hugsy/gef.git

/home/aikidance/.gef-2025.01.py

source ~/.gef-2025.01.py
-------------------------
gef commands 

description
context [legend|regs|stack|code|args|memory|source|trace|threads|extra]
------
start gef:

cmake --build . --config Debug -- VERBOSE=1
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$gdb ./psge537
gef➤file page537

gef➤  p *pN
------
gef➤  process-status
        PID  →  13276
        Executable  →  /home/aikidance/C_Deytel/Part12_data_strutures/page537/page537
        Command line  →  '/home/aikidance/C_Deytel/Part12_data_strutures/page537/page537'
[+] Parent Process Information
        Parent PID  →  12499
        Command line  →  'gdb ./page537'
[+] Children Process Information
        No child process
[+] File Descriptors:
        /proc/13276/fd/0  →  /dev/pts/10
        /proc/13276/fd/1  →  /dev/pts/10
        /proc/13276/fd/2  →  /dev/pts/10
        /proc/13276/fd/22  →  /home/aikidance/.vscode-server/data/logs/20250718T164952/ptyhost.log
        /proc/13276/fd/23  →  /dev/ptmx
        /proc/13276/fd/24  →  /home/aikidance/.vscode-server/data/logs/20250718T164952/remoteTelemetry.log
        /proc/13276/fd/25  →  /dev/ptmx
        /proc/13276/fd/28  →  /home/aikidance/.vscode-server/data/logs/20250718T164952/remoteagent.log
[+] Network Connections
        No open connections
-------------

/* 
aikidance@aikidance:~/C_Deytel$ cd Part12_data_strutures/page537
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ cmake --build . --config Debug -- VERBOSE=1
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ gdb ./page537
gef➤b main
gef➤run
---

aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ gdb ./page537
GNU gdb (Ubuntu 15.0.50.20240403-0ubuntu1) 15.0.50.20240403-git
Copyright (C) 2024 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
[ Legend: Modified register | Code | Heap | Stack | String ]
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────
$rax   : 0x0000555555555149  →  <main+0000> endbr64 
$rbx   : 0x00007fffffffd2d8  →  0x00007fffffffd5e7  →  "/home/aikidance/C_Deytel/Part12_data_strutures/pag[...]"
$rcx   : 0x0000555555557dc0  →  0x0000555555555100  →  <__do_global_dtors_aux+0000> endbr64 
$rdx   : 0x00007fffffffd2e8  →  0x00007fffffffd626  →  "SHELL=/bin/bash"
$rsp   : 0x00007fffffffd1a0  →  0x00007fffffffd290  →  0x0000555555555060  →  <_start+0000> endbr64 
$rbp   : 0x00007fffffffd1b0  →  0x00007fffffffd250  →  0x00007fffffffd2b0  →  0x0000000000000000
$rsi   : 0x00007fffffffd2d8  →  0x00007fffffffd5e7  →  "/home/aikidance/C_Deytel/Part12_data_strutures/pag[...]"
$rdi   : 0x1               
$rip   : 0x0000555555555155  →  <main+000c> mov QWORD PTR [rbp-0x10], 0x0
$r8    : 0x0               
$r9    : 0x00007ffff7fca380  →  <_dl_fini+0000> endbr64 
$r10   : 0x00007fffffffced0  →  0x0000000000800000
$r11   : 0x203             
$r12   : 0x1               
$r13   : 0x0               
$r14   : 0x0000555555557dc0  →  0x0000555555555100  →  <__do_global_dtors_aux+0000> endbr64 
$r15   : 0x00007ffff7ffd000  →  0x00007ffff7ffe2e0  →  0x0000555555554000  →   jg 0x555555554047
$eflags: [zero carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification]
$cs: 0x33 $ss: 0x2b $ds: 0x00 $es: 0x00 $fs: 0x00 $gs: 0x00 
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
0x00007fffffffd1a0│+0x0000: 0x00007fffffffd290  →  0x0000555555555060  →  <_start+0000> endbr64          ← $rsp
0x00007fffffffd1a8│+0x0008: 0x00007fffffffd2d8  →  0x00007fffffffd5e7  →  "/home/aikidance/C_Deytel/Part12_data_strutures/pag[...]"
0x00007fffffffd1b0│+0x0010: 0x00007fffffffd250  →  0x00007fffffffd2b0  →  0x0000000000000000     ← $rbp
0x00007fffffffd1b8│+0x0018: 0x00007ffff7c2a1ca  →  <__libc_start_call_main+007a> mov edi, eax
0x00007fffffffd1c0│+0x0020: 0x00007fffffffd200  →  0x0000555555557dc0  →  0x0000555555555100  →  <__do_global_dtors_aux+0000> endbr64 
0x00007fffffffd1c8│+0x0028: 0x00007fffffffd2d8  →  0x00007fffffffd5e7  →  "/home/aikidance/C_Deytel/Part12_data_strutures/pag[...]"
0x00007fffffffd1d0│+0x0030: 0x0000000155554040
0x00007fffffffd1d8│+0x0038: 0x0000555555555149  →  <main+0000> endbr64 
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────
   0x55555555514d <main+0004>      push   rbp
   0x55555555514e <main+0005>      mov    rbp, rsp
   0x555555555151 <main+0008>      sub    rsp, 0x10
●→ 0x555555555155 <main+000c>      mov    QWORD PTR [rbp-0x10], 0x0
   0x55555555515d <main+0014>      mov    QWORD PTR [rbp-0x8], 0x0
   0x555555555165 <main+001c>      mov    esi, 0x10
   0x55555555516a <main+0021>      mov    edi, 0x3
   0x55555555516f <main+0026>      call   0x555555555050 <calloc@plt>
   0x555555555174 <main+002b>      mov    QWORD PTR [rbp-0x10], rax
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── source:/home/aikidance[...]page537.c+12 ────
      7     struct node{
      8     char ch;
      9     struct node *p;
     10     };
     11  
 →   12     struct node *pN = NULL,*tmp = NULL;
     13     pN = calloc(NDCNT,sizeof(struct node));
     14     pN->ch = 'a';
     15     tmp = pN;
     16     pN++;
     17     tmp->p = pN;
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, Name: "page537", stopped 0x555555555155 in main (), reason: BREAKPOINT
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x555555555155 → main()
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
gef➤  

*/
https://askaralikhan.blogspot.com/2016/05/gdb-all-threads-bt-to-file.html?showComment=1584614942454#c4584028195226351332

send gdb ooutput to file:


gdb all threads bt to file
Perform the following steps to collect a backtrace from a core dump for all threads.

Find the core file and the executable that created.

Start gdb in the directory where the log file should be created:

By default, gdb will create a logfile called gdb.txt in the current working directory when logging is enabled.  Optionally, 
specify a different logfile name with this command:

Enable logging by running the following commands:

(gdb) set height 0
(gdb) set logging on


Request a backtrace:

(gdb) thread apply all bt full


Exit gdb by running the quit command, or press Ctrl-D.
Collect the logfile.

aikidance@aikidance:~/C_Deytel$ cd Part12_data_strutures/page537
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ cmake --build . --config Debug -- VERBOSE=1
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ gdb ./page537
gef➤b main
gef➤run

gdb output will send to gdb.txt
----------------------------------
ASSEMBLER

sudo apt update
sudo apt install build-essential gdb nasm
----
info file : writing_and_debugging

mkdir my_asm_project
-----------------------------------------------------------

26.07.25

info file: segmentation_fauled

main.c

#include <stdio.h>
-----
// Declare the external assembly function
extern int add_numbers(int a, int b);

int main() {
    int result = add_numbers(5, 3);  // Call the assembly function
    printf("Result: %d\n", result);   // Print the result
    return 0;
}
---
add_numbers.s

    .globl add_numbers
add_numbers:
    movl %edi, %eax
    addl %esi, %eax
    return
---

aikidance@aikidance:~/C_Deytel/assembler/insert_assembler_code_into_c_code$ gcc -o myprogram main.c add_numbers.s
aikidance@aikidance:~/C_Deytel/assembler/insert_assembler_code_into_c_code$ ./myprogram
--------------
29.7.25
BITO

aikidance@aikidance://home/aikidance/C_Deytel/assembler/my_asm_project$ nasm -f elf64 -g main.asm -o main.o
aikidance@aikidance://home/aikidance/C_Deytel/assembler/my_asm_project$ld -o main main.o
aikidance@aikidance://home/aikidance/C_Deytel/assembler/my_asm_project$ gdb ./main

gef➤  b main.asm:9
gef➤ run
-----------------------------------------------------------
x32
aikidance@aikidance:~/C_Deytel/assembler/nasm$ nasm -f elf32 -g p27.asm
aikidance@aikidance:~/C_Deytel/assembler/nasm$ ld -m elf_i386 p27.o -o p27
aikidance@aikidance:~/C_Deytel/assembler/nasm$ ./p27
Hello
Hello
Hello
Hello
Hello
---
gef➤  b p27.asm:2
Breakpoint 1 at 0x8049000: file p27.asm, line 4
gef➤  run

     1  %include "stud_io.inc"
●     2  global _start
      3  section .text
 →    4  _start: mov eax, 0
      5  again: PRINT "Hello"
      6  PUTCHAR 10
      7  inc eax
      8  cmp eax, 5
      9  jl again
      


