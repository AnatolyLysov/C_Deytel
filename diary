BITO
write code to CMakeLisis.txt to compile  page487.c
------------------
use_CMakeLists.txt
--------------------------
aikidance@aikidance:~/C_Deytel$ cmake --version
cmake version 3.28.3
---------------
mkdir build
cd build
----------
cmake ..
make
-------------
./page487
-------------
----------------
poage537.c

# Specify the minimum version of CMake required
cmake_minimum_required(VERSION 3.28.3)

# Set the project name
project(page537Project C)

# Add the executable target
add_executable(page537 page537.c)

aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ cmake ./
-- The C compiler identification is GNU 13.3.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Configuring done (3.3s)
-- Generating done (0.0s)
-- Build files have been written to: /home/aikidance/C_Deytel/Part12_data_strutures/page537
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ make
[ 50%] Building C object CMakeFiles/page537.dir/page537.c.o
[100%] Linking C executable page537
[100%] Built target page537
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ ./page537
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ 
----------------------------------------------------------
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ make help
The following are some of the valid targets for this Makefile:
... all (the default if no target is provided)
... clean
... depend
... edit_cache
... rebuild_cache
... page537
... page537.o
... page537.i
... page537.s
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ 
-----------------------------
# Specify the minimum version of CMake required
cmake_minimum_required(VERSION 3.28.3)

# Set the project name
project(page537Project C)

# Set the build type to Debug
set(CMAKE_BUILD_TYPE Debug)

# Add the executable target
add_executable(page537 page537.c)


aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ cmake --build . --config Debug -- VERBOSE=1

gdb ./page537
break main
run
--------------------------------
aikidance@aikidance:~/C_Deytel/Part12_data_strutures/page537$ gdb ./page537
GNU gdb (Ubuntu 15.0.50.20240403-0ubuntu1) 15.0.50.20240403-git
Copyright (C) 2024 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./page537...
(gdb)  break main
Breakpoint 1 at 0x1195: file /home/aikidance/C_Deytel/Part12_data_strutures/page537/page537.c, line 13.
(gdb) run
Starting program: /home/aikidance/C_Deytel/Part12_data_strutures/page537/page537 

This GDB supports auto-downloading debuginfo from the following URLs:
  <https://debuginfod.ubuntu.com>
Enable debuginfod for this session? (y or [n]) y
Debuginfod has been enabled.
To make this setting permanent, add 'set debuginfod enabled on' to .gdbinit.
Downloading separate debug info for system-supplied DSO at 0x7ffff7fc3000
[Thread debugging using libthread_db enabled]                                                                                                                                                  
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main () at /home/aikidance/C_Deytel/Part12_data_strutures/page537/page537.c:13
13          void *pChain = calloc(NODECNT,sizeof(struct node));
(gdb) 
-----------------------------
Все мы проходили через этот неловкий момент когда во время отладки мы проскочили интересующую нас функцию, 
и теперь снова надо перезапускать отладчик, 
проходить тот же путь на CFG и т.п. Чтобы избежать этого, в gdb есть такая фишка как Reverse Debug, 
позволяющая сохранить состояние программы и обратно отладить до него.

Для этого, после запуска отладчика укажем gdb, что хотим начать использовать 
reverse debug и стоит сохранять состояния программы

record

После этого станут доступны следующие команды

reverse-step
reverse-next
------------------------------------------
gdb ./page53
break main
run
record
reverse-continue, reverse-finish, reverse-next, reverse-nexti, reverse-search, reverse-step
-----------------------------
https://github.com/hugsy/gef

GEF (pronounced ʤɛf - "Jeff") is a set of commands for x86/64, ARM, MIPS, PowerPC and SPARC 
to assist exploit developers and reverse-engineers when using old school GDB. It provides additional features 
to GDB using the Python API to assist during the process of dynamic analysis and exploit development. 
Application developers will also benefit from it, as GEF lifts a great part of regular GDB obscurity, 
avoiding repeating traditional commands, or bringing out the relevant information from the debugging runtime.

bash -c "$(wget https://gef.blah.cat/sh -O -)"

GEF for linux ready, type `gef' to start, `gef config' to configure
93 commands loaded and 5 functions added for GDB 15.0.50.20240403-git in 0.00ms using Python engine 3.12
------------------------------
git clone https://github.com/hugsy/gef.git

/home/aikidance/.gef-2025.01.py

source ~/.gef-2025.01.py
-------------------------
gef description
context [legend|regs|stack|code|args|memory|source|trace|threads|extra]
