/*
A segmentation fault (“core dumped”) usually means your program is trying to access memory incorrectly. In your code from main.c:

C
#include <stdio.h>

// Declare the assembly function
extern int add_numbers(int a, int b);

int main() {
    int result = add_numbers(5, 3);
    printf("Result: %d\n", result);
    return 0;
}
The most likely cause is that the function add_numbers is declared but not defined anywhere (neither in C nor in assembly). 
When you run the program, main tries to call add_numbers, but since the symbol does not exist, you get a segmentation fault.

How to fix:

1. Provide a definition for add_numbers
You need to define add_numbers either in C or in assembly. Here’s a quick C fix you can add directly to your file for testing:

C
int add_numbers(int a, int b) {
    return a + b;
}
Add this above main() or in a separate file and compile both together.

2. If you want the assembly version
Create a file named add_numbers.s with this code (for x86-64, Linux):

asm
    .globl add_numbers
add_numbers:
    movl %edi, %eax
    addl %esi, %eax
    ret
Then compile and link:

sh
gcc -o myprogram main.c add_numbers.s
3. Rebuild and run
After adding the definition, rebuild your program. Now you should get:

Code
Result: 8
Summary:
The segmentation fault happens because add_numbers is missing. Define it in C or assembly, recompile, 
and your program will work. If you want help with a specific assembly implementation, 
let me know your system (Windows, Linux, Mac, 32-bit or 64-bit)!
*/